/*
 * This file is generated by jOOQ.
 */
package io.github.isan95.masivtest.db.tables;


import io.github.isan95.masivtest.db.DefaultSchema;
import io.github.isan95.masivtest.db.Indexes;
import io.github.isan95.masivtest.db.Keys;
import io.github.isan95.masivtest.db.tables.records.RouletteRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Roulette extends TableImpl<RouletteRecord> {

    private static final long serialVersionUID = 239036662;

    /**
     * The reference instance of <code>ROULETTE</code>
     */
    public static final Roulette ROULETTE = new Roulette();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RouletteRecord> getRecordType() {
        return RouletteRecord.class;
    }

    /**
     * The column <code>ROULETTE.ID</code>.
     */
    public final TableField<RouletteRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>ROULETTE.STATE</code>.
     */
    public final TableField<RouletteRecord, String> STATE = createField(DSL.name("STATE"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>ROULETTE.CUSTOMER</code>.
     */
    public final TableField<RouletteRecord, Integer> CUSTOMER = createField(DSL.name("CUSTOMER"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ROULETTE.BET_AMOUNT</code>.
     */
    public final TableField<RouletteRecord, Double> BET_AMOUNT = createField(DSL.name("BET_AMOUNT"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>ROULETTE.BET_NUMBER_OR_COLOR</code>.
     */
    public final TableField<RouletteRecord, String> BET_NUMBER_OR_COLOR = createField(DSL.name("BET_NUMBER_OR_COLOR"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>ROULETTE.WINNING_NUMBER_OR_COLOR</code>.
     */
    public final TableField<RouletteRecord, String> WINNING_NUMBER_OR_COLOR = createField(DSL.name("WINNING_NUMBER_OR_COLOR"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>ROULETTE.EARNED_MONEY</code>.
     */
    public final TableField<RouletteRecord, Double> EARNED_MONEY = createField(DSL.name("EARNED_MONEY"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>ROULETTE</code> table reference
     */
    public Roulette() {
        this(DSL.name("ROULETTE"), null);
    }

    /**
     * Create an aliased <code>ROULETTE</code> table reference
     */
    public Roulette(String alias) {
        this(DSL.name(alias), ROULETTE);
    }

    /**
     * Create an aliased <code>ROULETTE</code> table reference
     */
    public Roulette(Name alias) {
        this(alias, ROULETTE);
    }

    private Roulette(Name alias, Table<RouletteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Roulette(Name alias, Table<RouletteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Roulette(Table<O> child, ForeignKey<O, RouletteRecord> key) {
        super(child, key, ROULETTE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_2);
    }

    @Override
    public Identity<RouletteRecord, Long> getIdentity() {
        return Keys.IDENTITY_ROULETTE;
    }

    @Override
    public UniqueKey<RouletteRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    @Override
    public List<UniqueKey<RouletteRecord>> getKeys() {
        return Arrays.<UniqueKey<RouletteRecord>>asList(Keys.CONSTRAINT_2);
    }

    @Override
    public Roulette as(String alias) {
        return new Roulette(DSL.name(alias), this);
    }

    @Override
    public Roulette as(Name alias) {
        return new Roulette(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Roulette rename(String name) {
        return new Roulette(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Roulette rename(Name name) {
        return new Roulette(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Integer, Double, String, String, Double> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
